generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  admin
  user
}

// ðŸ”¹ Admin bisa lihat semua user & banyak sesi
model Admin {
  id         String   @id @default(cuid())
  email      String   @unique
  userName   String?   @unique
  password   String
  fullName   String
  role       Role     @default(admin)
  imgProfile String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relasi ke user
  users      User[]
}

// ðŸ”¹ Gender
enum Gender {
  lakiLaki
  perempuan
}

// ðŸ”¹ User hanya bisa lihat dirinya sendiri
model User {
  id         String   @id @default(cuid())
  adminId    String
  email      String   @unique
  userName   String?   @unique
  password   String
  age        Int
  gender     Gender
  fullName   String
  role       Role     @default(user)
  imgProfile String?
  educationHistory  String?
  medicalNote String?
  isLogin    Boolean @default(false)
  isActive   Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt 

  // Relasi ke admin
  admin      Admin @relation(fields: [adminId], references: [id])
  vrSession  VRSession[]
}


// ðŸ”¹ VR Session

model VRSession {
  sessionId String   @id @default(cuid())

  // Relasi ke user
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  startTime DateTime 
  endTime   DateTime
  duration  Int
  device    String?
  previousSessionId String?

  // relasi
  cameraRotations CameraRotation[]
  tasks Task[]
  roomHistory RoomVisit[]
  interactions Interaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

// ðŸ”¹ Camera Rotation

model CameraRotation {
  id String @id @default(cuid())

  timeStamp DateTime
  rotX      Float
  rotY      Float

  // Relasi ke VR Session
  sessionId String
  session   VRSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
}

// ðŸ”¹ status Task
enum Status {
  completed
  failed
  pending
}

// ðŸ”¹ Task
model Task {
  id String @id @default(cuid())
  taskId String
  taskName String
  status Status
  timeSpent Int

  // Relasi ke VR Session
  sessionId String
  session   VRSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
}

// ðŸ”¹ Room Visit
model RoomVisit {
  id String @id @default(cuid())
  roomId String
  roomName String
  enterTime DateTime
  exitTime DateTime

  // Relasi ke VR Session
  sessionId String
  session   VRSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
}

// ðŸ”¹ Interaction
model Interaction {
  id String @id @default(cuid())
  type String
  targetId String?
  targetName String?
  targetType String?
  timestamp DateTime

  // Relasi ke VR Session
  sessionId String
  session   VRSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
}